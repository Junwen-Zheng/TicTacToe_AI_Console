/**
 * This class represents the UI of the tic tac toe board that display
 * the players mark on each board square.
 */
package tictactoe.ui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import tictactoe.core.Board;
import tictactoe.core.Move;

/**
 *
 * @author
 */
public class BoardPanel extends javax.swing.JPanel {

    /** the Board instance that this panel represents */
    private Board board;
    
    private Image imgX;
    private Image imgO;
    
    /**
     * Creates new form BoardPanel
     */
    public BoardPanel(Board board) {
        try {
            initComponents();
            this.board = board;
            imgX = ImageIO.read(getClass().getResource("/tictactoe/images/X.png"));
            imgO = ImageIO.read(getClass().getResource("/tictactoe/images/O.png"));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Get an instance of Move from a board panel mouse click position
     * @param clickX the X position of the click in the panel
     * @param clickY the Y position of the click in the panel
     * @return The Move instance indicating the row,col position of the board
     */
    public Move getMoveFromBoardClick(int clickX, int clickY){
        Move move = null;
        int squareWidth = getWidth()/3;
        int squareHeight = getHeight()/3;
        int column = clickX/squareWidth % 3;
        int row = clickY/squareHeight % 3;
        move = new Move(row,column);
        System.out.println(move.toString());
        return move;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D)g;
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, getWidth(), getHeight());
        
        g2d.setColor(Color.BLACK);
        g2d.setStroke(new BasicStroke(4.0f));
        g2d.drawLine(getWidth()/3, 0, getWidth()/3, getHeight());
        g2d.drawLine(2*getWidth()/3, 0, 2*getWidth()/3, getHeight());
        g2d.drawLine(0, getHeight()/3, getWidth(), getHeight()/3);
        g2d.drawLine(0, 2*getHeight()/3, getWidth(), 2*getHeight()/3);
        
        int squareWidth = getWidth()/3;
        int squareHeight = getHeight()/3;
        
        for(int row = 0; row < board.getSize(); row++){
            for(int col = 0; col < board.getSize(); col++){                
                Image playerImage = null;
                if(board.get(row, col).equals("X")){
                    playerImage = scaleImage(squareWidth, squareHeight, imgX);
                }
                else if(board.get(row, col).equals("O")){
                    playerImage = scaleImage(squareWidth, squareHeight, imgO);
                }
                if(playerImage != null){
                    int y = row * squareWidth + (int)((squareWidth - playerImage.getWidth(null))/2); 
                    int x = col * squareHeight + (int)((squareHeight - playerImage.getHeight(null))/2);
                    g2d.drawImage(playerImage, x, y, null);
                }                
            }
        }
    }

    /**
     * Get a scaled version of an Image with given width and height.
     * 
     * @param width the scaled width
     * @param height the scaled height
     * @param img the source Image
     * @return the scaled version of the Image
     */
    private Image scaleImage(int width, int height, Image img){
        int w = (int)(width*0.7);
        int h = (int)(height*0.7);
        Image scaledImage = img.getScaledInstance(w, h, Image.SCALE_SMOOTH);
        return scaledImage;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
